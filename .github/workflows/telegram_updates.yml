name: Telegram Bot Notify

on:
  push:
    branches:
      - master
  watch:
    types: [started]
  issues:
    types: [opened, closed]
  pull_request:
    types: [opened, closed, reopened]
  release:
    types: [published]

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Send Telegram Message
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          THREAD_ID: ${{ secrets.THREAD_ID }}
        run: |
          EVENT_NAME="${{ github.event_name }}"
          ACTOR="${{ github.actor }}"
          REPO="${{ github.repository }}"
          API_URL="https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage"
          
          escape_markdown() { 
            echo "$1" | sed -e 's/[*]/\\&/g' \
                            -e 's/_/\\_/g' \
                            -e 's/(/\ÓÄÅ/g' \
                            -e 's/)/\ÓÄÅ/g' \
                            -e 's/`/\\`/g'
          }

          send_message() {
            # If a second parameter is passed, include reply_markup.
            if [ -z "$2" ]; then
              curl -s -X POST $API_URL \
                -d chat_id="$CHAT_ID" \
                -d message_thread_id="$THREAD_ID" \
                -d text="$(echo -e "$1")" \
                -d parse_mode=Markdown
            else
              curl -s -X POST $API_URL \
                -d chat_id="$CHAT_ID" \
                -d message_thread_id="$THREAD_ID" \
                -d text="$(echo -e "$1")" \
                -d parse_mode=Markdown \
                -d reply_markup="$2"
            fi
          }

          if [[ "$EVENT_NAME" == "push" ]]; then
            COMMIT_MSG_RAW="${{ github.event.head_commit.message }}"
            COMMIT_URL="${{ github.event.head_commit.url }}"
            COMMIT_MSG=$(escape_markdown "$COMMIT_MSG_RAW")
            REPLY='{"inline_keyboard": [[{"text": "View Commit", "url": "'"$COMMIT_URL"'"}]]}'
            send_message "üî® *Push* by [$ACTOR](https://github.com/$ACTOR)\n‚Ä¢ *Message:* $COMMIT_MSG" "$REPLY"

          elif [[ "$EVENT_NAME" == "watch" ]]; then
            send_message "‚≠ê *$ACTOR* starred aShell You"

          elif [[ "$EVENT_NAME" == "issues" ]]; then
            ISSUE_ACTION="${{ github.event.action }}"
            ISSUE_TITLE_RAW="${{ github.event.issue.title }}"
            ISSUE_URL="${{ github.event.issue.html_url }}"
            ISSUE_TITLE=$(escape_markdown "$ISSUE_TITLE_RAW")
            if [[ "$ISSUE_ACTION" == "closed" ]]; then
              ISSUE_REASON="${{ github.event.issue.state_reason }}"
              REPLY='{"inline_keyboard": [[{"text": "View Issue", "url": "'"$ISSUE_URL"'"}]]}'
              send_message "‚úÖ *Issue closed* by [$ACTOR](https://github.com/$ACTOR)\n‚Ä¢ *Reason:* \`$ISSUE_REASON\`\n‚Ä¢ *$ISSUE_TITLE*" "$REPLY"
            else
              REPLY='{"inline_keyboard": [[{"text": "View Issue", "url": "'"$ISSUE_URL"'"}]]}'
              send_message "üêõ *Issue $ISSUE_ACTION* by [$ACTOR](https://github.com/$ACTOR):\n‚Ä¢ *$ISSUE_TITLE*" "$REPLY"
            fi

          elif [[ "$EVENT_NAME" == "pull_request" ]]; then
          PR_ACTION="${{ github.event.action }}"
          PR_TITLE_RAW="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_TITLE=$(escape_markdown "$PR_TITLE_RAW")
          PR_MERGED="${{ github.event.pull_request.merged }}"
          REPLY='{"inline_keyboard": [[{"text": "View PR", "url": "'"$PR_URL"'"}]]}'
          if [[ "$PR_ACTION" == "closed" ]]; then
          if [[ "$PR_MERGED" == "true" ]]; then
          STATUS="*Merged*"
          else
          STATUS="*Closed without merge*"
          fi
          send_message "üîÉ *Pull Request closed* by [$ACTOR](https://github.com/$ACTOR)\n‚Ä¢ $STATUS\n‚Ä¢ *$PR_TITLE*" "$REPLY"
          else
          send_message "üîÉ *Pull Request $PR_ACTION* by [$ACTOR](https://github.com/$ACTOR):\n‚Ä¢ *$PR_TITLE*" "$REPLY"
          fi
          
          elif [[ "$EVENT_NAME" == "release" ]]; then
            REL_NAME_RAW="${{ github.event.release.name }}"
            REL_URL="${{ github.event.release.html_url }}"
            REL_NAME=$(escape_markdown "$REL_NAME_RAW")
            REPLY='{"inline_keyboard": [[{"text": "View Release", "url": "'"$REL_URL"'"}]]}'
            send_message "üöÄ *New Release Published* by [$ACTOR](https://github.com/$ACTOR):\n‚Ä¢ *$REL_NAME*" "$REPLY"
          fi
